<html>
<head>
<meta id='metaFileNameId' name='id' content='32258' />
<title>Composite Nodes</title>
<link type='text/css' href='xstyle.css' rel='stylesheet' media='all' />
<script src='script.js' language='javascript' type='text/javascript'> </script>
<script src='common.js' language='javascript' type='text/javascript'> </script>
<xml>
<MSHelp:Attr Name="Product" Value="JsDiagram">
</xml>
</head>
<body style='margin: 0;'>
<img src='collapse.png' title='Collapse Section' id='collapseImage' style='display: none; height: 0; width: 0;' /><img src='expand.png' title='Expand Section' id='expandImage' style='display: none; height: 0; width: 0;' /><img src='collapsesmall.png' title='Collapse All' id='collapseAllImage' style='display: none; height: 0; width: 0;' /><img src='expandsmall.png' title='Expand All' id='expandAllImage' style='display: none; height: 0; width: 0;' /><input type="hidden" id="userDataCache" class="userDataStyle"><img src='arrow.png' title='DropDown image' id='dropDownImage' style='display: none; height: 0; width: 0;' /><img src='arrowh.png' title='DropDown image' id='dropDownHoverImage' style='display: none; height: 0; width: 0;' /><img src='copycode.png' title='Copy Code' id='copyCodeImage' style='display: none; height: 0; width: 0;' /><img src='copycodeh.png' title='Copy Code' id='copyCodeHoverImage' style='display: none; height: 0; width: 0;' /><div id='nsbanner'>
<table class='bannerparthead' cellspacing='0'>
<tr>
<td><span class='gtitle'>MindFusion.Diagramming for JavaScript Programmer's Guide</span></td>
</tr>
<tr>
<td style='border-bottom: solid 1px #C8CDDE;'><span class='title'>Composite Nodes</span></td>
</tr>
</table>
</div>
<div id='nstext'>
<p>The&#160;<a id='57993' href='T_MindFusion_Diagramming_CompositeNode_0.htm' title=''>CompositeNode</a> class makes it easier to add custom graphics primitives to nodes. Appearance of composite nodes is defined by a tree of layout panels and child components. Unlike MindFusion's desktop diagram libraries, node templates are specified using JSON notation instead of XML.&#160;A sample&#160;node class&#160;derived from <span class='repeatingLink'>CompositeNode</span> can now be defined declaratively as below.</p><p><table class='syntax' codeLanguage='JavaScript' cellspacing='0'><tr><th><span style='float: left;'>JavaScript</span>
<span class='copyCode' onclick='CopyCode(this);' onkeypress='CopyCode_CheckKey(this);' onmouseover='ChangeCopyCodeIcon(this, true);' onmouseout='ChangeCopyCodeIcon(this, false);'>
<img src='copycode.png' title='Copy Code' style='border-width: 0;' />&#160;Copy Code</span>
</th></tr><tr><td><p>var OrgChartNode = CompositeNode.classFromTemplate("OrgChartNode",<br/>{<br/>&#160;component: "GridPanel",<br/>&#160;rowDefinitions: ["*"],<br/>&#160;columnDefinitions: ["22", "*"],<br/>&#160;children:<br/>&#160;[<br/>&#160; {<br/>&#160;&#160; component: "Rect",<br/>&#160;&#160; name: "Background",<br/>&#160;&#160; pen: "black",<br/>&#160;&#160; brush: "white",<br/>&#160;&#160; columnSpan: 2<br/>&#160; },<br/>&#160; {<br/>&#160;&#160; component: "Image",<br/>&#160;&#160; name: "Image",<br/>&#160;&#160; autoProperty: true,<br/>&#160;&#160; location: "icon4.png",<br/>&#160;&#160; margin: "1",<br/>&#160;&#160; imageAlign: "Fit"<br/>&#160; },<br/>&#160; {<br/>&#160;&#160; component: "StackPanel",<br/>&#160;&#160; orientation: "Vertical",<br/>&#160;&#160; gridColumn: 1,<br/>&#160;&#160; margin: "1",<br/>&#160;&#160; verticalAlignment: "Near",<br/>&#160;&#160; children:<br/>&#160;&#160; [<br/>&#160;&#160;&#160; {<br/>&#160;&#160;&#160;&#160; component: "Text",<br/>&#160;&#160;&#160;&#160; name: "Title",<br/>&#160;&#160;&#160;&#160; autoProperty: true,<br/>&#160;&#160;&#160;&#160; text: "title",<br/>&#160;&#160;&#160;&#160; font: "Arial bold"<br/>&#160;&#160;&#160; },<br/>&#160;&#160;&#160; {<br/>&#160;&#160;&#160;&#160; component: "Text",<br/>&#160;&#160;&#160;&#160; name: "FullName",<br/>&#160;&#160;&#160;&#160; autoProperty: true,<br/>&#160;&#160;&#160;&#160; text: "full name",<br/>&#160;&#160;&#160;&#160; pen: "blue",<br/>&#160;&#160;&#160;&#160; padding: "1,0,1,0"<br/>&#160;&#160;&#160; },<br/>&#160;&#160;&#160; {<br/>&#160;&#160;&#160;&#160; component: "Text",<br/>&#160;&#160;&#160;&#160; name: "Details",<br/>&#160;&#160;&#160;&#160; autoProperty: true,<br/>&#160;&#160;&#160;&#160; text: "details",<br/>&#160;&#160;&#160;&#160; font: "Arial 3"<br/>&#160;&#160;&#160; }<br/>&#160;&#160; ]<br/>&#160; }<br/>&#160;]<br/>});</p></td></tr></table></p><p>Objects from the <a id='32537' href='CC_N_MindFusion_Drawing_0.htm' title=''>MindFusion.Drawing</a> namespace (such as <a id='32547' href='T_MindFusion_Drawing_Rect.htm' title=''>Rect</a>, <a id='1747' href='T_MindFusion_Drawing_Image.htm' title=''>Image</a>, <a id='1772' href='T_MindFusion_Drawing_Path.htm' title=''>Path</a>, <a id='94808' href='T_MindFusion_Drawing_Video.htm' title=''>Video</a>),&#160;double as <span class='repeatingLink'>CompositeNode</span> components. Apart from JSON templates, the visual tree can also be created by adding panels and drawing objects programmatically starting from CompositeNode.root.</p><p>Panel classes include:</p><ul><li><a id='52696' href='T_MindFusion_Diagramming_SimplePanel.htm' title=''>SimplePanel</a>, laying out its children to overlap each other, taking up all available space (useful for background graphics or images).</li><li><a id='56584' href='T_MindFusion_Diagramming_StackPanel.htm' title=''>StackPanel</a>, laying out its children side by side, either horizontally or vertically.</li><li><a id='52246' href='T_MindFusion_Diagramming_GridPanel.htm' title=''>GridPanel</a>, laying out its children in rows and columns, where children in same cell overlap. Rows and columns can be either set to a fixed size, auto-size to their child preferred size, or take up all space remaining unoccupied by other rows and columns.</li></ul><p>Named components (with specified name value) can be accessed by calling the <a id='59706' href='M_MindFusion_Diagramming_CompositeNode_getComponent_1_String.htm' title=''>getComponent</a> method. Components whose autoProperty attribute is enabled will have a pair of get/set property methods generated automatically by <a id='57997' href='M_MindFusion_Diagramming_CompositeNode_classFromTemplate_2_String_Object.htm' title=''>classFromTemplate</a> method. The auto-properties from above template can be used as below.</p><p><table class='syntax' codeLanguage='JavaScript' cellspacing='0'><tr><th><span style='float: left;'>JavaScript</span>
<span class='copyCode' onclick='CopyCode(this);' onkeypress='CopyCode_CheckKey(this);' onmouseover='ChangeCopyCodeIcon(this, true);' onmouseout='ChangeCopyCodeIcon(this, false);'>
<img src='copycode.png' title='Copy Code' style='border-width: 0;' />&#160;Copy Code</span>
</th></tr><tr><td><p>var node1 = new OrgChartNode(diagram);<br/>node1.setBounds(new Rect(25, 15, 60, 25));<br/>node1.setTitle("CEO");<br/>node1.setFullName("John Smith");<br/>node1.setDetails(<br/>&#160;&#160;&#160; "Our beloved leader. \r\n" +<br/>&#160;&#160;&#160; "The CEO of this great corporation.");<br/>node1.setImage("ceo.png");<br/>diagram.addItem(node1);</p></td></tr></table><br/><img src='composite_nodes_js.png' title='' hspace='0' vspace='0' align='' width='527' height='291'/></p><p>Auto properties are also automatically serialized in JSON format, cloned by node.clone() method and saved/restored by undo commands.</p><p>The <a id='32440' href='CC_T_MindFusion_Diagramming_Shape_0.htm' title=''>Shape</a> class used to specify <a id='32485' href='CC_T_MindFusion_Diagramming_ShapeNode_0.htm' title=''>ShapeNode</a> geometry can also be used as a component. When its <b>isOutline</b> attribute is set, the shape will control <span class='repeatingLink'>CompositeNode</span>'s geometry too, defining hit test and clip area, and link alignment points&#160;along node's border. If <b>isOutline</b> is disabled, the shape will serve mostly as a decorative element.&#160;The code below shows a sample&#160;fragment&#160;specifying shape component in template:</p><p><table class='syntax' codeLanguage='JavaScript' cellspacing='0'><tr><th><span style='float: left;'>JavaScript</span>
<span class='copyCode' onclick='CopyCode(this);' onkeypress='CopyCode_CheckKey(this);' onmouseover='ChangeCopyCodeIcon(this, true);' onmouseout='ChangeCopyCodeIcon(this, false);'>
<img src='copycode.png' title='Copy Code' style='border-width: 0;' />&#160;Copy Code</span>
</th></tr><tr><td><p>{<br/>&#160;&#160;&#160; component: "Shape",<br/>&#160;&#160;&#160; id: "Cloud",<br/>&#160;&#160;&#160; autoProperty: true,<br/>&#160;&#160;&#160; name: "OutlineShape",<br/>&#160;&#160;&#160; pen: "gray",<br/>&#160;&#160;&#160; brush: "Transparent",<br/>&#160;&#160;&#160; isOutline: true<br/>},</p></td></tr></table></p><p>A&#160;<a id='91667' href='T_MindFusion_Diagramming_Button.htm' title=''>Button</a> component that raises event when clicked can be added to template like this:</p><p><table class='syntax' codeLanguage='JavaScript' cellspacing='0'><tr><th><span style='float: left;'>JavaScript</span>
<span class='copyCode' onclick='CopyCode(this);' onkeypress='CopyCode_CheckKey(this);' onmouseover='ChangeCopyCodeIcon(this, true);' onmouseout='ChangeCopyCodeIcon(this, false);'>
<img src='copycode.png' title='Copy Code' style='border-width: 0;' />&#160;Copy Code</span>
</th></tr><tr><td><p>{<br/>&#160;&#160;&#160; component: "Button",<br/>&#160;&#160;&#160; brush: "#ccc",<br/>&#160;&#160;&#160; text: "Delete",<br/>&#160;&#160;&#160; width: 30,<br/>&#160;&#160;&#160; cornerRadius: 3.5,<br/>&#160;&#160;&#160; clickHandler: "onDeleteClick"<br/>}</p></td></tr></table></p>
</div>
<div id='nsfooter'>
<table class='footer' cellspacing='0'>
<tr>
<td valign='middle'>
<span class='copyright'>© 2021 MindFusion</span>
</td>
</tr>
</table>
</div>
</body>
</html>
