<html>
<head>
<meta id='metaFileNameId' name='id' content='34127' />
<title>Laying out the Diagram</title>
<link type='text/css' href='xstyle.css' rel='stylesheet' media='all' />
<script src='script.js' language='javascript' type='text/javascript'> </script>
<script src='common.js' language='javascript' type='text/javascript'> </script>
<xml>
<MSHelp:Attr Name="Product" Value="JsDiagram">
</xml>
</head>
<body style='margin: 0;'>
<img src='collapse.png' title='Collapse Section' id='collapseImage' style='display: none; height: 0; width: 0;' /><img src='expand.png' title='Expand Section' id='expandImage' style='display: none; height: 0; width: 0;' /><img src='collapsesmall.png' title='Collapse All' id='collapseAllImage' style='display: none; height: 0; width: 0;' /><img src='expandsmall.png' title='Expand All' id='expandAllImage' style='display: none; height: 0; width: 0;' /><input type="hidden" id="userDataCache" class="userDataStyle"><img src='arrow.png' title='DropDown image' id='dropDownImage' style='display: none; height: 0; width: 0;' /><img src='arrowh.png' title='DropDown image' id='dropDownHoverImage' style='display: none; height: 0; width: 0;' /><img src='copycode.png' title='Copy Code' id='copyCodeImage' style='display: none; height: 0; width: 0;' /><img src='copycodeh.png' title='Copy Code' id='copyCodeHoverImage' style='display: none; height: 0; width: 0;' /><div id='nsbanner'>
<table class='bannerparthead' cellspacing='0'>
<tr>
<td><span class='gtitle'>MindFusion.Diagramming for JavaScript Programmer's Guide</span></td>
</tr>
<tr>
<td style='border-bottom: solid 1px #C8CDDE;'><span class='title'>Laying out the Diagram</span></td>
</tr>
</table>
</div>
<div id='nstext'>
<p>The diagram can be arranged automatically by calling its <a id='32384' href='M_MindFusion_Diagramming_Diagram_arrange_1_void.htm' title=''>arrange</a> method and specifying a layout algorithm. Different layout algorithms are implemented by the&#160;various Layout classes from the <a id='32574' href='N_MindFusion_Graphs.htm' title=''>MindFusion.Graphs</a> namespace. To apply one of them, create an instance of the respective class, customize its properties and pass it as an argument to <span class='repeatingLink'>arrange</span>. It is also possible to lay out the contents of an individual <a id='45247' href='CC_T_MindFusion_Diagramming_ContainerNode_0.htm' title=''>ContainerNode</a> by calling the container's <a id='49741' href='M_MindFusion_Diagramming_ContainerNode_arrange_1_void.htm' title=''>arrange</a> method.</p><h2>Layered Graph Layout</h2><p>The <a id='32603' href='T_MindFusion_Graphs_LayeredLayout.htm' title=''>LayeredLayout</a> algorithm arranges diagram nodes in layers according to several criteria, most important of which are: connected nodes must be placed close together; links must flow in one direction if possible; links must cross as few layers as possible; links must not cross other links. To apply the layout to a diagram, create a <span class='repeatingLink'>LayeredLayout</span> instance, set its members and invoke the <a id='32384' href='M_MindFusion_Diagramming_Diagram_arrange_1_void.htm' title=''>arrange</a> method.</p><h2>Spring-Embedder Graph Layout</h2><p>Spring-Embedder is force-directed layout algorithm. It simulates a physical system in which nodes repulse each other, and the links between them act as confining springs. Graphs processed by Spring-Embedder have their nodes distributed uniformly across the diagram area. The algorithm can be applied on a graph by creating a <a id='32652' href='T_MindFusion_Graphs_SpringLayout.htm' title=''>SpringLayout</a> object and calling&#160;the <a id='32384' href='M_MindFusion_Diagramming_Diagram_arrange_1_void.htm' title=''>arrange</a> method. Members of <span class='repeatingLink'>SpringLayout</span> allow you to set the desired distance between graph nodes and the number of iteration steps to&#160;run while processing the simulation.</p><h2>Tree Layout</h2><p>If application's data is structured hierarchically, it is appropriate to apply tree layout on it. To do this, create a <a id='32634' href='T_MindFusion_Graphs_TreeLayout.htm' title=''>TreeLayout</a> or <a id='37069' href='T_MindFusion_Graphs_BorderedTreeLayout.htm' title=''>BorderedTreeLayout</a>&#160;instance and call&#160;the <a id='32384' href='M_MindFusion_Diagramming_Diagram_arrange_1_void.htm' title=''>arrange</a> method. The difference between two classes is&#160;where they place child nodes in relation to their parent; the former centers the parent above its children, the latter&#160;arranges children in columns at a horizontal offset form their parent (see <a id='4302' href='CC_Tutorial_2__Loading_Hierarchical_Data_1.htm' title=''>Tutorial 2</a>).&#160;Members of both classes&#160;control&#160;the tree direction,&#160;how much space to leave between tree levels and between nodes on the same level.</p><h2>Fractal Layout</h2><p>The <a id='34123' href='T_MindFusion_Graphs_FractalLayout.htm' title=''>FractalLayout</a> tree layout algorithm places child nodes symmetrically around their parent node. Nodes at the lowest level are arranged directly in a circle around their parent. At the upper level, the already arranged nodes form branches that are arranged in a circle around the new parent node. The algorithm is recursively repeated till the highest level is reached.</p><h2>Treemap Layout</h2><p>Tree maps represent hierarchies by nesting child nodes within their parents, where the areas of leaf nodes are proportional to their <a id='73704' href='M_MindFusion_Diagramming_DiagramItem_setWeight_1_Number.htm' title=''>Weight</a> values. Unlike other layout algorithms, <a id='73668' href='T_MindFusion_Graphs_TreeMapLayout.htm' title=''>TreeMapLayout</a> expects hierarchies to be defined via grouping or containment (see <a id='37839' href='M_MindFusion_Diagramming_DiagramNode_attachTo_1_DiagramNode.htm' title=''>attachTo</a> method and <a id='45247' href='CC_T_MindFusion_Diagramming_ContainerNode_0.htm' title=''>ContainerNode</a> class), and will ignore any links in the diagram.</p><h2>Flowchart Layout</h2><p><a id='90772' href='T_MindFusion_Graphs_FlowchartLayout.htm' title=''>FlowchartLayout</a> recognizes program code -like patterns in the graph, such as loops, sequences and if/switch branchings, and arranges them recursively. <span class='repeatingLink'>FlowchartLayout</span> could be used to arrange other types of graphs as well, though with some restrictions. For example it treats all back links as loops in the code, and expects that they are nested - loop links starting closer to the stop node should end closer to the start node. Another similar restriction is that there shouldn't be any cross-links that connect different branches of a decision sub-graph.</p><h2>Topological Layout</h2><p><a id='97340' href='T_MindFusion_Graphs_TopologicalLayout.htm' title=''>TopologicalLayout</a> applies&#160;graph topological ordering&#160;to&#160;the diagram (topological ordering of a graph is one where link's origin node&#160;is placed&#160;before link's destination node).&#160;The layout algorithm&#160;arranges nodes in a row or a column, depending on the value of the <a id='97350' href='F_MindFusion_Graphs_TopologicalLayout_direction.htm' title=''>direction</a> property, in such a way that there are no backward links when the graph is acyclic. If the graph contains cycles, the algorithms selects ordering with as few backward links as possible. Links&#160;that connect&#160;non-adjacent nodes are rendered as arcs, whose&#160;amplitude is proportional to the distance between&#160;respective connected nodes. Forward links are rendered at one side of the nodes and back links are rendered at the opposite side. All that makes it easy to discern graph features such as overall flow direction, cycles and nested cycles. </p><p></p>
</div>
<div id='nsfooter'>
<table class='footer' cellspacing='0'>
<tr>
<td valign='middle'>
<span class='copyright'>© 2021 MindFusion</span>
</td>
</tr>
</table>
</div>
</body>
</html>
