<html>
<head>
<meta id='metaFileNameId' name='id' content='45317' />
<title>Standard Item Types</title>
<link type='text/css' href='xstyle.css' rel='stylesheet' media='all' />
<script src='script.js' language='javascript' type='text/javascript'> </script>
<script src='common.js' language='javascript' type='text/javascript'> </script>
<xml>
<MSHelp:Attr Name="Product" Value="JsDiagram">
</xml>
</head>
<body style='margin: 0;'>
<img src='collapse.png' title='Collapse Section' id='collapseImage' style='display: none; height: 0; width: 0;' /><img src='expand.png' title='Expand Section' id='expandImage' style='display: none; height: 0; width: 0;' /><img src='collapsesmall.png' title='Collapse All' id='collapseAllImage' style='display: none; height: 0; width: 0;' /><img src='expandsmall.png' title='Expand All' id='expandAllImage' style='display: none; height: 0; width: 0;' /><input type="hidden" id="userDataCache" class="userDataStyle"><img src='arrow.png' title='DropDown image' id='dropDownImage' style='display: none; height: 0; width: 0;' /><img src='arrowh.png' title='DropDown image' id='dropDownHoverImage' style='display: none; height: 0; width: 0;' /><img src='copycode.png' title='Copy Code' id='copyCodeImage' style='display: none; height: 0; width: 0;' /><img src='copycodeh.png' title='Copy Code' id='copyCodeHoverImage' style='display: none; height: 0; width: 0;' /><div id='nsbanner'>
<table class='bannerparthead' cellspacing='0'>
<tr>
<td><span class='gtitle'>MindFusion.Diagramming for JavaScript Programmer's Guide</span></td>
</tr>
<tr>
<td style='border-bottom: solid 1px #C8CDDE;'><span class='title'>Standard Item Types</span></td>
</tr>
</table>
</div>
<div id='nstext'>
<p>Diagram elements in&#160;<span>MindFusion.Diagramming for JavaScript</span>&#160;are represented by <a id='32485' href='CC_T_MindFusion_Diagramming_ShapeNode_0.htm' title=''>ShapeNode</a>, <a id='45247' href='CC_T_MindFusion_Diagramming_ContainerNode_0.htm' title=''>ContainerNode</a>,&#160;<a id='41624' href='CC_T_MindFusion_Diagramming_TableNode_0.htm' title=''>TableNode</a> and&#160;<a id='32441' href='CC_T_MindFusion_Diagramming_DiagramLink_0.htm' title=''>DiagramLink</a> instances. Combined and linked together, they can form complex data structures such as process or entity-relationship diagrams, class hierarchies, networks and graphs. Each of their rich features can be customized through numerous methods and properties.</p><h2>Shape Nodes</h2><p><a id='32485' href='CC_T_MindFusion_Diagramming_ShapeNode_0.htm' title=''>ShapeNode</a> objects&#160;can represent geometric shapes, flowchart elements, icons in network diagrams, and so on. They can display both graphics and text in different fonts, sizes and colors.&#160;A node's shape can be set by calling its <a id='32507' href='M_MindFusion_Diagramming_ShapeNode_setShape_1_Shape.htm' title=''>setShape</a> method.&#160;There are&#160;more than 100&#160;predefined node shapes&#160;and apart from them,&#160;<span>MindFusion.Diagramming for JavaScript</span> offers an easy way to define custom shapes. Shape nodes can be rotated, either interactively using the round selection handle drawn above them, or programmatically using the <a id='32301' href='M_MindFusion_Diagramming_DiagramNode_setRotationAngle_1_Number.htm' title=''>RotationAngle</a> property.</p><h2>SVG Nodes</h2><p>The <a id='27291' href='T_MindFusion_Diagramming_SvgNode_0.htm' title=''>SvgNode</a> class represents nodes that can display SVG drawings. SVG&#160;graphics are&#160;rendered&#160;instead of&#160;<a id='32501' href='M_MindFusion_Diagramming_ShapeNode_setImage_1_Image.htm' title=''>Image</a>, and on top of the geometry rendered by the base&#160;<a id='32485' href='CC_T_MindFusion_Diagramming_ShapeNode_0.htm' title=''>ShapeNode</a>&#160;class. Enable the <a id='32510' href='M_MindFusion_Diagramming_ShapeNode_setTransparent_1_Boolean.htm' title=''>Transparent</a> property to hide the node's geometry and leave only the drawing visible. The SVG&#160;file is loaded and associated with the node through an <a id='16113' href='T_MindFusion_Diagramming_SvgContent.htm' title=''>SvgContent</a> object, which should be initialized and then assigned to the <a id='27375' href='M_MindFusion_Diagramming_SvgNode_setContent_1_SvgContent.htm' title=''>Content</a> property.</p><h2>Composite Nodes</h2>Nodes in MindFusion.Diagramming can be composed from components. Components are graphical widgets similar to controls, which can be arranged in hierarchies and added to a <a id='32377' href='CC_T_MindFusion_Diagramming_Diagram_0.htm' title=''>Diagram</a> through instances of the <a id='57993' href='T_MindFusion_Diagramming_CompositeNode_0.htm' title=''>CompositeNode</a> class. The component system contains various built-in components, such as <a id='1737' href='T_MindFusion_Drawing_Text.htm' title=''>Text</a> and <a id='1747' href='T_MindFusion_Drawing_Image.htm' title=''>Image</a>. Component hierarchies can be defined and loaded&#160;through&#160;Json templates using <a id='59707' href='M_MindFusion_Diagramming_CompositeNode_loadTemplate_1_Object.htm' title=''>loadTemplate</a> and <a id='57997' href='M_MindFusion_Diagramming_CompositeNode_classFromTemplate_2_String_Object.htm' title=''>classFromTemplate</a> methods.<h2>Table Nodes</h2><p>A <a id='41624' href='CC_T_MindFusion_Diagramming_TableNode_0.htm' title=''>TableNode</a> displays tabular data,&#160;and can be used to represent table schemas in database diagrams or classes in class-hierarchies. A table contains cells arranged in a&#160;grid, and every cell can display text and/or image. Cells, columns and rows can be customized in various ways - there are properties available for setting their extents, style, image and text alignment. Tables' dimensions can be programmatically changed; inserting, appending or deleting rows and columns can be done in a very comprehensive, intuitive way whenever you might need it. Tables can also display background images and graphics.</p><h2>Free-form Nodes</h2>A <a id='69975' href='T_MindFusion_Diagramming_FreeFormNode_0.htm' title=''>FreeFormNode</a> collects all points from users' mouse or touch input and displays them as node's outline. To let users draw free-form nodes interactively, set <a id='37967' href='M_MindFusion_Diagramming_Diagram_setBehavior_1_Behavior.htm' title=''>Behavior</a> to <a id='37983' href='CC_T_MindFusion_Diagramming_Behavior_0.htm' title=''>DrawFreeForms</a>. Use the <a id='71864' href='M_MindFusion_Diagramming_FreeFormNode_setPoints_1_Array.htm' title=''>Points</a> property of <span class='repeatingLink'>FreeFormNode</span> to get or set outline points programmatically. If the <a id='71863' href='M_MindFusion_Diagramming_FreeFormNode_setClosed_1_Boolean.htm' title=''>Closed</a> property is set, the node is drawn as a closed shape and its interior filled, or otherwise the node is drawn as a poly-line. If the distance between first and last points drawn by user is shorter than <a id='69972' href='M_MindFusion_Diagramming_Diagram_setAutoCloseDistance_1_Number.htm' title=''>AutoCloseDistance</a>, the node gets closed automatically. <h2>Container Nodes</h2><p>A <a id='45247' href='CC_T_MindFusion_Diagramming_ContainerNode_0.htm' title=''>ContainerNode</a> can contain other diagram nodes. When a container is moved, its&#160;child nodes move too. Containers can be nested one within another to unlimited depth. They can be folded to a smaller size, hiding their child items, and unfolded to show content again.&#160;Nodes inside a container can be linked to nodes both inside and outside of it. If a link connects items in the same container, the container is not considered an obstacle by the auto-routing algorithm.</p><h2>Video Nodes</h2><p><a id='94799' href='T_MindFusion_Diagramming_VideoNode.htm' title=''>VideoNode</a> objects display video streams, along with UI elements to play, pause, seek and change volume. Call&#160;node's&#160;<a id='94806' href='M_MindFusion_Diagramming_VideoNode_setVideoLocation_1_String.htm' title=''>setVideoLocation</a> method to specify&#160;its video URL. Auto-playing is not supported at this time, and the video can be started only by users clicking the play button. <span class='repeatingLink'>VideoNode</span> is built around <a id='94808' href='T_MindFusion_Drawing_Video.htm' title=''>Video</a> component, which can also be used in <a id='57993' href='T_MindFusion_Diagramming_CompositeNode_0.htm' title=''>CompositeNode</a> templates.</p><h2>Control Nodes</h2><p><a id='91681' href='T_MindFusion_Diagramming_ControlNode_0.htm' title=''>ControlNode</a> objects display custom HTML content, specified via their <a id='91693' href='M_MindFusion_Diagramming_ControlNode_setTemplate_1_String.htm' title=''>Template</a> property. A node's DOM structure is created inside the <a id='91686' href='M_MindFusion_Diagramming_ControlNode_getContent_0.htm' title=''>Content</a> div element, which is then rendered on top of the diagram canvas. Note that this prevents <span class='repeatingLink'>ControlNode</span>s drawing in diagram' usual Z order, and they will always appear on top of other diagram items. By default the diagram intercepts mouse events of all hosted html elements to enable moving nodes or drawing links. You can specify that interactive elements, such as buttons or text boxes, should receive input instead by setting their <b>data-interactive</b> attribute to <b>true</b>.<br/></p><h2>Links</h2><p><a id='32441' href='CC_T_MindFusion_Diagramming_DiagramLink_0.htm' title=''>DiagramLink</a> objects&#160;are used to represent various types of connections and relations in diagrams.&#160;<span>MindFusion.Diagramming for JavaScript</span>&#160;offers three basic link shapes, which can be set by calling <a id='32468' href='M_MindFusion_Diagramming_DiagramLink_setShape_1_LinkShape.htm' title=''>setShape</a>:</p><ul><li>polyline links composed of straight-line segments;</li><li>curved links composed of Bézier-spline segments;</li><li>cascading links composed of horizontal and vertical segments, alternating their orientation so that every segment is orthogonal to its neighbor.</li></ul><p>A link can be connected to a node at each of the link's ends. It is also possible to have unconnected links - having one or both of their ends&#160; not connected to nodes. Some customizable link's properties are: arrowheads, style,&#160;text, pen width and style, modification behavior and number of segments.</p><p><b>See Also</b><br/><a id='37834' href='CC_Controlling_User_Interaction_0.htm' title=''>Controlling User Interaction</a></p>
</div>
<div id='nsfooter'>
<table class='footer' cellspacing='0'>
<tr>
<td valign='middle'>
<span class='copyright'>© 2021 MindFusion</span>
</td>
</tr>
</table>
</div>
</body>
</html>
